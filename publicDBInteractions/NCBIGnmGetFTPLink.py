#!/usr/bin/python

'''
!!! returns one genome per organism given (no matter how many genomes there is for that one species.)

1. species TaxonID/name table. format:
    taxonId\tname (this can be generated by the NCBITaxonomyNormalizeSpList.py script)
2. refseq or genbank
    this indicates whether you want to query /genome/genbank/ folder or /genome/refseq/ folder.
3. best/<complete/contig/chromosome/scaffold>
    if best, then one genome per species, only output the top one based on completeness. If multiple genomes with same compleness, the first in line of the refseq list will be saved
    if level indicated, then all genomes under that species with that level will be in the output
'''
    
from sys import argv, exit
from ftplib import FTP


'''
def getFTPList():
    ftp = FTP('ftp.ncbi.nlm.nih.gov')
    ftp.login()
    ftp.cwd('/genomes/all')

    prjList = []
    linkList = []
    ftp.retrlines('LIST', prjList.append)

    of = open('all_ncbi_ftp_genome_links.txt','w')
    for prj in prjList:
        pjName = prj.split()[-1]
        of.write('ftp://ftp.ncbi.nlm.nih.gov/genomes/all/' + pjName + '\n')
        linkList.append('ftp://ftp.ncbi.nlm.nih.gov/genomes/all/' + pjName)
    of.close()

    return linkList
'''

def downloadGnmGbkSum(folder):
    import urllib 
    from os import path
    if folder == 'genbank':
        fileName = 'tmp.gnomes.genbank.assembly.summary'
        url = 'ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/assembly_summary_genbank.txt'
    elif folder == 'refseq':
        fileName = 'tmp.gnomes.refseq.assembly.summary'
        url = 'ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/assembly_summary_refseq.txt'
    else:
        print "Unrecognized folder name. Should be genbank or refseq."
        return 'folder name error'

    redownload = True
    if path.isfile(fileName):
        overwrite = raw_input("asssembly summary file already exist here. OVERWRITE?(Y/n)").rstrip()
        if overwrite.lower() == 'n' or overwrite.lower() == 'no':
            redownload = False
        #redownload = False
    if redownload:
        urllib.urlretrieve(url, fileName)
    return fileName

def getBestLinks(spTaxonList, linkList):
    keyLinks = {}

    #hash the linkLists
    linkDict = {}
    for link in linkList:
        #linkId = link.split('\t')[0]
        assembVersion = link.split('\t')[10]
        if assembVersion == 'replaced':
            continue        
        assembLevel = link.split('\t')[11]
        downloadLink = link.split('\t')[-1]
        spTaxonID = link.split('\t')[6]
        if spTaxonID in linkDict.keys():
            linkDict[spTaxonID].append([assembLevel, downloadLink])
        else:
            linkDict[spTaxonID] = [[assembLevel, downloadLink]]    

    print len(linkDict.keys()), ' species with genomes loaded.'
    levels = ['complete genome', 'chromosome', 'scaffold', 'contig']
    i = 1
    for spTaxonKey in spTaxonList:
        if i % 500 == 0:
            print "processed %s so far..."%i
        #print "Processing %s"%spTaxonKey
        
        if not spTaxonKey in linkDict.keys():
            #print '...no genome'
            keyLinks[spTaxonKey] = ('no_genome', 'no_genome')
        else:
            #print "%s genome found"%spTaxonKey
            genomeList = linkDict[spTaxonKey]
            bestLevel = None
            for level in levels:
                #print ".....checking for %s level genomes"%level,
                for genome in genomeList:
                    #print genome[0], level
                    if genome[0].lower() == level.lower():
                        keyLinks[spTaxonKey] = (genome[1], genome[0])
                        bestLevel = level
                        break
                if not bestLevel == None:
                    #print 'Found!'
                    break
                '''
                for link in linkList:
                    assembLevel = link.split('\t')[11]
                    downloadLink = link.split('\t')[-1]
                    spTaxonID = link.split('\t')[6]
                    if spTaxonKey == spTaxonID and level in assembLevel.lower():
                        keyFound = True
                        #print "Found!",
                        keyLinks[spTaxonKey] = (downloadLink, assembLevel)
                        break
                '''

        i+=1
#    for l in keyLinks:
#        print l, keyLinks[l]
#    for l in linkDict:
#        print l, len(linkDict[l])
    return keyLinks

def getLinksByLevel(spTaxonList, linkList, level):
    keyLinks = {}

    #hash the linkLists:
    linkDict = {}
    for link in linkList:
        #linkId = link.split('\t')[0]
        assembVersion = link.split('\t')[10]
        if assembVersion == 'replaced':
            continue        
        assembLevel = link.split('\t')[11]
        downloadLink = link.split('\t')[-1]
        spTaxonID = link.split('\t')[6]
        if spTaxonID in linkDict.keys():
            linkDict[spTaxonID].append([assembLevel, downloadLink])
        else:
            linkDict[spTaxonID] = [[assembLevel, downloadLink]]    

    print len(linkDict.keys()), ' species with genomes loaded.'
    if level == 'complete':
        level = 'complete genome'
    i = 1
    for spTaxonKey in spTaxonList:
        if i % 500 == 0:
            print "processed %s so far..."%i

        if not spTaxonKey in linkDict.keys():
            #print '...no genome'
            keyLinks[spTaxonKey] = ('no_genome', 'no_genome')
        else:
            #print "%s genome found"%spTaxonKey
            genomeList = linkDict[spTaxonKey]
            j = 0
            for genome in genomeList:
                if genome[0].lower() == level.lower():
                    j += 1
                    keyLinks[spTaxonKey + '_' + level + str(j)] = (genome[1], genome[0])
            if j == 0:
                keyLinks[spTaxonKey] = ('no_genome', 'no_genome')                    
        i += 1
    return keyLinks 


def main():
    from sys import argv, exit
    from os import path
    if len(argv) <> 4:
        exit(__doc__)

    fname = argv[1]
    folder = argv[2]
    level = argv[3]

    # read in input file and  
    # get one to one corresponding list of taxonID and taxonName
    f = open(fname, 'r')
    taxonIDList = []
    #taxonNameList = []
    taxonLookup = {}
    for l in f:
        if l.strip():
            taxonIDList.append(l.rstrip().split('\t')[0])
            #taxonNameList.append(l.rstrip().split('\t')[1])
            taxonLookup[l.rstrip().split('\t')[0]] = l.rstrip().split('\t')[1]
    f.close()
    # print taxonIDList

    # get GenBank FTP manifesto
    ftpListFile = downloadGnmGbkSum(folder)
    pjList = []
    ftpList = open(ftpListFile,'r')
    for l in ftpList:
        pjList.append(l.rstrip())

    # get LinkList
    if level == 'best':
        linkList = getBestLinks(taxonIDList, pjList)
    else:
        linkList = getLinksByLevel(taxonIDList, pjList, level)
    #print linkList

    # write out filt
    outf = open("%s_%s_%s.tab"%(path.basename(fname), folder, level),'w')
    '''
    for i in range(len(taxonIDList)):
        #print taxonIDList[i]
        link = linkList[taxonIDList[i]][0]
        level = linkList[taxonIDList[i]][1]
        name = taxonNameList[i]
        if not link in ['no_genome','na']:
            outf.write("%s\t%s\t%s\n"%(name, link, level))
    '''
    if level == 'complete':
        level = 'complete genome'
    for i in linkList.keys():
        if level in i:
            #print level, i
            taxonID, gnmSuffix = str(i).split('_')
            gnmSuffix = '_' + gnmSuffix.replace(level, '')
        else:
            #print level, i
            taxonID = str(i)
            gnmSuffix = ''
        link = linkList[i][0]
        indlevel = linkList[i][1]
        name = taxonLookup[taxonID] + gnmSuffix
        if not link in ['no_genome','na']:
            outf.write("%s\t%s\t%s\n"%(name, link, indlevel))
    outf.close()

if __name__ == "__main__":
    main()
